extends ../layout

block content
  script(type='text/javascript', src='/javascripts/pdf.js')
  .container
    h2=session.title
  .theatre
    .container
      .row
        .col-md-8.col-lg-8
          .slide-wrapper
            #slide_view
              canvas#slide_canvas
            .progress#slide_progress_autoplay(style='margin-bottom: 0')
              .progress-bar(style='width: 0%;')
              span.explanation
                | Speaker
            .progress#slide_progress
              .progress-bar.progress-bar-danger(style='width: 0%;')
              span.explanation
                | You
          .form-group
            button.btn.btn-info.active#toggle_autoplay_btn(onclick='toggleAutoplay()')
              span.glyphicon.glyphicon-play-circle.text-mute
            &nbsp;
            button.btn.btn-default#prev(onclick='goPrevious()')
              span.glyphicon.glyphicon-chevron-left
            button.btn.btn-default#next(onclick='goNext()')
              span.glyphicon.glyphicon-chevron-right
            .pull-right.page-progress
              span#page_num
              | &nbsp;/&nbsp;
              span#page_count
          .form-group
            .input-group#comment_form
              input.form-control#comment_body(placeholder='コメントを入力')
              .input-group-btn
                button.btn.btn-default#comment_btn Post
        .col-md-4.col-lg-4
          form
            .form-group
              label.control-label(for='description') Description
              p.form-control-static=slide.description
            .form-group
              label.control-label(for='speaker') Speaker
              p.form-control-static
                a(href='/users/#{speaker.uid}')=speaker.name
            .form-group
              label.control-label(for='created') Created At
              p.form-control-static=slide.created
            hr
            ul#url_list.list-unstyled
  - if(user)
    script
      var pageNum = 1;
      var socket = io.connect('http://#{conf.io.client.host}:#{conf.io.client.port}');
      socket.on('connected', function(){
        socket.json.emit('init', { 'session_id': '#{session._id}', 'user_id': '#{user.uid}' });
      });
      socket.on('page changed', function(data){
        pageNum = data.current_page;
        if(isAutoplayMode){
          renderPage(pageNum, true);
        }
        $('#slide_progress_autoplay > .progress-bar').css({'width': (pageNum / pdfDoc.numPages * 100).toString() + '%'});
        console.log(data);
      });
      socket.on('message', function(data){
        console.log(data);
      });
      socket.on('new comment', function(data){
        var commentElm = $('<span class="comment" style="display:inline-block;"/>').appendTo('#slide_view');
        commentElm.css('position', 'absolute');
        commentElm.css('top', data.y * $('#slide_view').height());
        commentElm.css('left', $('#slide_view').width());
        commentElm.css('z-index', 1000000);
        commentElm.html(data.body);
        commentElm.css('font-size', $('#slide_view').height()/16);
        commentElm.width(parseInt(commentElm.css('font-size').slice(0, -2))*commentElm.text().length);
        // debugger;
        commentElm.animate({'left': -commentElm.width()}, 5000, 'linear');
        console.log(data);
      });
      function postComment(){
        socket.json.emit('post comment', {
            body: $('#comment_body').val()
          , user_id: '#{user.uid}'
          , user_name: '#{user.name}'
          , y: 0.1 + Math.random()*0.8
        });
        $('#comment_body').val('');
      }
      $('#comment_btn').click(function(){
        postComment();
      });
      $('#comment_body').keypress(function(ev){
        if ((ev.which && ev.which === 13) || (ev.keyCode && ev.keyCode === 13)) {
          postComment();
        }
      });
      $(document).keydown(function(ev){
        // console.log(ev);
        if ((ev.which && ev.which === 37) || (ev.keyCode && ev.keyCode === 37)) { //when left arrow key is pressed
          goPrevious();
        }else if ((ev.which && ev.which === 39) || (ev.keyCode && ev.keyCode === 39)) { //when right arrow key is pressed
          goNext();
        }
      });
      $('#slide_view').css('position', 'relative');
      $('#slide_view').css('overflow', 'hidden');
      var url = "/uploads/#{slide.file_url}";
      var isAutoplayMode = true;
      PDFJS.disableWorker = true;
      var pdfDoc = null,
          scale = 1.0,
          canvas = document.getElementById('slide_canvas'),
          slideView = document.getElementById('slide_view'),
          ctx = canvas.getContext('2d');
      function renderPage(num, isAutoplayAssisted) {
        // Using promise to fetch the page
        SLIDE_STRING = ''; //reset string
        pdfDoc.getPage(num).then(function(page) {
          var viewport = page.getViewport($('#slide_canvas').parent().width()/page.getViewport(1.0).width);
          // debugger;
          slideView.height = canvas.height = viewport.height;
          slideView.width = canvas.width = viewport.width;
          // Render PDF page into canvas context
          var renderContext = {
            canvasContext: ctx,
            viewport: viewport
          };
          page.render(renderContext).then(function(){
            $('#slide_progress').attr('style', 'width:' +  $('#slide_canvas').width() + 'px;');
        
            console.log('retrieved text : ' + SLIDE_STRING);
            var re = /[h3p|h1p]s?:\/\/[-_.!~*\'()a-zA-Z0-9;\/?:\@&=+\$,%#]+?\//g;
            var urls = SLIDE_STRING.match(re);
            $('#url_list').html('');
            if(urls != null){
              urls = urls.map(function(url){
                return url.replace(/[h3p|h1p|h\/p]/, 'http');
              });
              urls.map(function(url){
                $('#url_list').append('<li><a href="' + url + '" target="_blank">' + '<span class="glyphicon glyphicon-share"></span> '+ url + '</li>');
              });
            }
            console.log(urls);
          });
        });
        // Update page counters
        document.getElementById('page_num').textContent = pageNum;
        document.getElementById('page_count').textContent = pdfDoc.numPages;
        if(isAutoplayAssisted){
          $('#slide_progress_autoplay > .progress-bar').css({'width': (pageNum / pdfDoc.numPages * 100).toString() + '%'});
          $('#slide_progress > .progress-bar').css({'width': (pageNum / pdfDoc.numPages * 100).toString() + '%'});        
        }else{
          $('#slide_progress > .progress-bar').css({'width': (pageNum / pdfDoc.numPages * 100).toString() + '%'});        
        }
      }
      function goPrevious() {
        if (pageNum <= 1)
          return;
        quitAutoplay();
        pageNum--;
        renderPage(pageNum);
      }
      function goNext() {
        if (pageNum >= pdfDoc.numPages)
          return;
        quitAutoplay();
        pageNum++;
        renderPage(pageNum);
      }
      function toggleAutoplay(){
        if(isAutoplayMode){
          isAutoplayMode = false;
          $('#toggle_autoplay_btn').removeClass('btn-info').removeClass('active').addClass('btn-default');
        }else {
          isAutoplayMode = true;
          $('#toggle_autoplay_btn').addClass('btn-info').addClass('active').removeClass('btn-default');
        }
      }
      function quitAutoplay(){
        if(isAutoplayMode){
          isAutoplayMode = false;
          $('#toggle_autoplay_btn').removeClass('btn-info').removeClass('active').addClass('btn-default');
        }
      }
      PDFJS.getDocument(url).then(function getPdfHelloWorld(_pdfDoc) {
        pdfDoc = _pdfDoc;
        renderPage(pageNum, true);
      });
      //
      //
    